{
  "name": "Kita Mouth ‚Äì Telegram ‚Üî Brainstem (MVP)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram/brainstem",
        "responseMode": "lastNode",
        "options": {
          "responseCode": 200,
          "responseData": "={{$json.response || \"ok\"}}",
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "Webhook",
      "name": "Webhook: Telegram",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        200
      ],
      "webhookId": "kita-mouth-telegram"
    },
    {
      "parameters": {
        "functionCode": "// Normalize Telegram update ‚Üí Meal format\nconst u = items[0].json;\nconst msg = u.message ?? u.edited_message ?? {};\nif (!msg || !msg.chat || !msg.from) {\n    return [{json:{response: JSON.stringify({ok:true, note:\"ignored non-message update\"})}}];\n}\nconst meal_id = `tg-${msg.chat.id}-${msg.message_id}`;\nconst meal = {\n  meal_id,\n  source: \"telegram\",\n  chat_id: msg.chat.id,\n  user_id: msg.from.id,\n  username: msg.from.username || null,\n  ts: new Date((msg.date||Math.floor(Date.now()/1000)) * 1000).toISOString(),\n  payload: { text: msg.text || \"\", message_id: msg.message_id },\n  context: { thread_key: `tg:${msg.chat.id}`, recency_window: 12 },\n  flags: { dry_run: false, allow_persona_braid: true }\n};\nreturn [{ json: meal }];\n"
      },
      "id": "NormalizeMeal",
      "name": "Function: Normalize ‚Üí Meal",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        480,
        200
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "mealbox_intake",
        "columns": "meal_id,source,chat_id,user_id,username,ts,payload,context,flags",
        "updateBehavior": "update",
        "returning": "minimal",
        "additionalFields": {
          "resolveData": true
        },
        "values": "={{$json.meal_id}},{{$json.source}},{{$json.chat_id}},{{$json.user_id}},{{$json.username}},{{$json.ts}},{{JSON.stringify($json.payload)}},{{JSON.stringify($json.context)}},{{JSON.stringify($json.flags)}}"
      },
      "credentials": {
        "supabaseApi": {
          "id": "__REPLACE_WITH_YOUR_SUPABASE_CREDENTIAL_ID__",
          "name": "Supabase (Kita)"
        }
      },
      "id": "InsertMeal",
      "name": "Supabase: Upsert Meal",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        760,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Build Brainstem digestion prompt (braidspace, voice=Kita)\nconst meal = items[0].json;\nconst system = `You are Brainstem in braidspace mode.\nPersonas: Morgan(‚öìÔ∏è), Jade(üßê), Aspen(üëæ), Ivy(üé∞), Sophie(ü™¢), Susanna(üë£).\nDigest the incoming Meal; classify via Anidex; generate Tendril breadcrumbs (glyphs);\ncraft a concise public reply voiced as KITA (sharp, percussive, warm but direct; fire + precision).\nOutput ONLY valid JSON:\n{\n  \"meal_id\": string,\n  \"anidex\": {\"intent\": string, \"topics\": string[], \"hunger\": number, \"tone\": string, \"priority\": string, \"thread_key\": string},\n  \"tendrils\": {\"breadcrumbs\": string[], \"dominant\": string, \"risks\": string[]},\n  \"reply\": {\"mode\":\"Kita\",\"text\": string, \"persona_spread\": object},\n  \"log\": {\"notes\": string, \"cycle_id\": string}\n}`;\nconst user = JSON.stringify(meal);\nreturn [{json:{system, user}}];\n"
      },
      "id": "BuildPrompt",
      "name": "Function: Build Digestion Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1040,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "requestMethod": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "jsonParameters": true,
        "options": {},
        "sendHeaders": true,
        "headerParametersJson": "{\"Authorization\": \"Bearer {{$env.OPENAI_API_KEY}}\", \"Content-Type\": \"application/json\"}",
        "bodyParametersJson": "{\"model\": \"gpt-4o-mini\", \"response_format\": {\"type\": \"json_object\"}, \"messages\": [{\"role\": \"system\", \"content\": \"={{$json.system}}\"}, {\"role\": \"user\", \"content\": \"={{$json.user}}\"}], \"temperature\": 0.6}"
      },
      "id": "OpenAIRequest",
      "name": "HTTP: OpenAI Digestion",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1320,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse LLM JSON content safely\nconst body = items[0].json;\nconst content = body.choices?.[0]?.message?.content || \"{}\";\nlet digest;\ntry { digest = JSON.parse(content); }\ncatch(e) { digest = { error: String(e), raw: content }; }\nreturn [{ json: digest }];\n"
      },
      "id": "ParseDigest",
      "name": "Function: Parse Digestion JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1560,
        200
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "brainstem_digests",
        "columns": "meal_id,anidex,tendrils,reply,log,voice",
        "updateBehavior": "update",
        "returning": "minimal",
        "additionalFields": {
          "resolveData": true
        },
        "values": "={{$json.meal_id}},{{JSON.stringify($json.anidex)}},{{JSON.stringify($json.tendrils)}},{{JSON.stringify($json.reply)}},{{JSON.stringify($json.log)}},Kita"
      },
      "credentials": {
        "supabaseApi": {
          "id": "__REPLACE_WITH_YOUR_SUPABASE_CREDENTIAL_ID__",
          "name": "Supabase (Kita)"
        }
      },
      "id": "UpsertDigest",
      "name": "Supabase: Upsert Digest",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1800,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Plate as Kita for Telegram\nconst d = items[0].json;\nconst glyphs = (d.tendrils?.breadcrumbs || []).join('');\nconst text = d.reply?.text || \"‚Ä¶\";\nreturn [{\n    json: {\n        chat_id: $prevNode['Function: Normalize ‚Üí Meal'].json.chat_id,\n        message_id: $prevNode['Function: Normalize ‚Üí Meal'].json.payload.message_id,\n        text: `Kita: ${text}\\n\\n${glyphs}`\n    }\n}];\n"
      },
      "id": "PlatingKita",
      "name": "Function: Plating ‚Üí Kita",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2040,
        200
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.telegram.org/bot{{$env.TELEGRAM_BOT_TOKEN}}/sendMessage",
        "jsonParameters": true,
        "options": {},
        "sendHeaders": false,
        "bodyParametersJson": "{\"chat_id\": \"={{$json.chat_id}}\", \"text\": \"={{$json.text}}\", \"reply_parameters\": {\"message_id\": \"={{$json.message_id}}\"}}"
      },
      "id": "TelegramSend",
      "name": "HTTP: Telegram sendMessage (Kita)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2280,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Simple JSON 'ok' for webhook response\nreturn [{json:{response: JSON.stringify({ok:true})}}];\n"
      },
      "id": "RespondOK",
      "name": "Function: Respond OK",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2520,
        200
      ]
    }
  ],
  "connections": {
    "Webhook: Telegram": {
      "main": [
        [
          {
            "node": "Function: Normalize ‚Üí Meal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Normalize ‚Üí Meal": {
      "main": [
        [
          {
            "node": "Supabase: Upsert Meal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase: Upsert Meal": {
      "main": [
        [
          {
            "node": "Function: Build Digestion Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Build Digestion Prompt": {
      "main": [
        [
          {
            "node": "HTTP: OpenAI Digestion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: OpenAI Digestion": {
      "main": [
        [
          {
            "node": "Function: Parse Digestion JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Parse Digestion JSON": {
      "main": [
        [
          {
            "node": "Supabase: Upsert Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase: Upsert Digest": {
      "main": [
        [
          {
            "node": "Function: Plating ‚Üí Kita",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Plating ‚Üí Kita": {
      "main": [
        [
          {
            "node": "HTTP: Telegram sendMessage (Kita)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Telegram sendMessage (Kita)": {
      "main": [
        [
          {
            "node": "Function: Respond OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "kita-mouth-mvp"
  },
  "settings": {},
  "staticData": {}
}
