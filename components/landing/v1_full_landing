import React, { useEffect, useMemo, useRef, useState } from "react";
import { motion, useAnimation, useInView, useMotionValue, animate } from "framer-motion";

// ---- Brand palette helpers ----
const brand = {
  navy: "#0b1220",
  ember: "#FF4D3D",
  emberSoft: "#FF6A55",
  teal: "#18B6C9",
  tealSoft: "#4ED2DF",
  sand: "#EDE7DF",
};

// ---- Reusable UI ----
const Container: React.FC<React.PropsWithChildren<{ className?: string }>> = ({ className = "", children }) => (
  <div className={`mx-auto w-full max-w-6xl px-6 md:px-10 ${className}`}>{children}</div>
);

const CTAButton: React.FC<{
  children: React.ReactNode;
  onClick?: () => void;
  variant?: "ember" | "teal" | "ghost";
  className?: string;
}> = ({ children, onClick, variant = "ember", className = "" }) => {
  const palette =
    variant === "ember"
      ? "from-[#FF6A55] to-[#FF3D3D] text-white"
      : variant === "teal"
      ? "from-[#19B7CA] to-[#4FD3E0] text-slate-900"
      : "from-transparent to-transparent text-white ring-1 ring-white/20 hover:ring-white/40";
  return (
    <motion.button
      whileHover={{ y: -2, boxShadow: "0 12px 40px rgba(255,80,64,0.25)" }}
      whileTap={{ scale: 0.98 }}
      onClick={onClick}
      className={`relative inline-flex items-center justify-center gap-2 rounded-xl bg-gradient-to-br px-6 py-3 font-semibold tracking-tight ${palette} ${className}`}
    >
      {children}
    </motion.button>
  );
};

// Spiral logo mark (SVG) — animated subtle rotation / breathing
const SpiralMark: React.FC<{ size?: number; className?: string }> = ({ size = 72, className = "" }) => (
  <motion.svg
    width={size}
    height={size}
    viewBox="0 0 160 160"
    className={className}
    initial={{ rotate: 0 }}
    animate={{ rotate: 360 }}
    transition={{ repeat: Infinity, duration: 48, ease: "linear" }}
  >
    <defs>
      <linearGradient id="g1" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" stopColor={brand.teal} />
        <stop offset="100%" stopColor={brand.ember} />
      </linearGradient>
    </defs>
    {Array.from({ length: 15 }).map((_, i) => (
      <path
        key={i}
        d={`M80,${15 + i * 4} c${30 - i * 1.2},${10 + i * 1.2} ${30 - i * 1.2},${45 + i * 1.15} 0,${55 + i * 1.15}
           c-${30 - i * 1.2},${10 + i * 1.2} -${30 - i * 1.2},-${45 + i * 1.15} 0,-${55 + i * 1.15}z`}
        fill="none"
        stroke="url(#g1)"
        strokeOpacity={0.14 + i * 0.03}
        strokeWidth={1.7}
      />
    ))}
  </motion.svg>
);

// Counter that animates to a target number
const CountUp: React.FC<{ to: number; duration?: number; className?: string; prefix?: string; suffix?: string }> = ({
  to,
  duration = 2.2,
  className = "",
  prefix = "",
  suffix = "",
}) => {
  const node = useRef<HTMLSpanElement | null>(null);
  useEffect(() => {
    const controls = animate(0, to, {
      duration,
      ease: "easeOut",
      onUpdate: (v) => {
        if (node.current) node.current.textContent = `${prefix}${Math.round(v)}${suffix}`;
      },
    });
    return () => controls.stop();
  }, [to, duration, prefix, suffix]);
  return <span ref={node} className={className} />;
};

// Single list item with strike-through animation when in view
const StrikeItem: React.FC<React.PropsWithChildren<{ delay?: number }>> = ({ children, delay = 0 }) => {
  const ref = useRef<HTMLDivElement | null>(null);
  const inView = useInView(ref, { margin: "-20% 0px -20% 0px", once: true });
  const controls = useAnimation();
  useEffect(() => {
    if (inView) {
      controls.start({ width: "100%", transition: { duration: 0.9, delay } });
    }
  }, [inView, controls, delay]);
  return (
    <div ref={ref} className="relative py-3 pl-6">
      <div className="absolute left-0 top-1.5 h-2 w-2 rounded-full bg-white/70" />
      <span className="relative z-10 text-slate-200">{children}</span>
      <motion.span
        aria-hidden
        initial={{ width: 0 }}
        animate={controls}
        className="absolute left-0 top-1/2 h-[2px] -translate-y-1/2 bg-white/40"
      />
    </div>
  );
};

// Section wrapper with subtle parallax gradient background
const SectionShell: React.FC<{
  id?: string;
  bg?: "dark" | "light" | "ember" | "pattern";
  children: React.ReactNode;
  className?: string;
}> = ({ id, bg = "dark", children, className = "" }) => {
  const backgrounds = {
    dark: "relative bg-[#0b1220]",
    light: "relative bg-white",
    ember: "relative bg-gradient-to-br from-[#1a0f0f] via-[#220c0a] to-[#2c0b0b]",
    pattern: "relative bg-[#0b1220]",
  } as const;
  return (
    <section id={id} className={`${backgrounds[bg]} ${className}`}>
      {/* soft vignette */}
      <div className="pointer-events-none absolute inset-0 opacity-[0.6] [background:radial-gradient(60%_60%_at_50%_10%,rgba(255,100,80,0.18)_0%,rgba(24,182,201,0.12)_60%,transparent_80%)]" />
      <Container className="relative z-10 py-20 md:py-28">{children}</Container>
    </section>
  );
};

// ---- Page Component ----
const Hero: React.FC = () => (
  <div className="relative isolate min-h-[88vh] overflow-hidden bg-[#0b1220] pt-6 text-white">
    {/* Glow / gradient backdrop */}
    <div className="pointer-events-none absolute -top-24 left-1/2 h-[90vh] w-[90vh] -translate-x-1/2 rounded-full bg-[conic-gradient(from_180deg_at_50%_50%,rgba(24,182,201,0.3),rgba(255,77,61,0.3),rgba(24,182,201,0.15))] blur-[60px]" />

    <Container>
      <header className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <SpiralMark size={40} />
          <div className="font-semibold tracking-tight">
            <div className="text-xl">tekita</div>
            <div className="text-[10px] uppercase tracking-[0.25em] text-white/70">Weaving Presence</div>
          </div>
        </div>
      </header>

      <div className="mt-16 grid items-center gap-10 md:mt-24 md:grid-cols-2">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7 }}>
          <h1 className="text-4xl font-extrabold leading-tight md:text-6xl">
            <span className="text-white/90">20 Hours Wasted per Week = </span>
            <span className="bg-gradient-to-r from-[#FF6A55] to-[#FF3D3D] bg-clip-text text-transparent">$50,000</span>
            <span className="text-white/90"> Lost Every Year. Per Employee.</span>
          </h1>
          <p className="mt-6 max-w-xl text-lg text-slate-200/90">
            Every day, your business leaks hours you’ll never get back. Competitors who automated months ago are already
            compounding their lead. You don’t need another tool. You need work that runs itself — so your people can
            focus on winning.
          </p>
          <div className="mt-8 flex flex-wrap items-center gap-4">
            <CTAButton>
              <span>Claim Your Free Time‑Recovery Call</span>
              <span className="rounded bg-white/15 px-2 py-[2px] text-xs font-medium">Only 7 slots this month</span>
            </CTAButton>
            <CTAButton variant="ghost" className="px-5">
              Learn more
            </CTAButton>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.98 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.9, delay: 0.1 }}
          className="relative mx-auto w-full max-w-md"
        >
          {/* Hero stat card */}
          <div className="relative overflow-hidden rounded-2xl border border-white/10 bg-white/5 p-6 backdrop-blur">
            <div className="flex items-center gap-4">
              <SpiralMark size={56} />
              <div>
                <div className="text-sm text-white/70">Average weekly hours Tekita gives back</div>
                <div className="text-4xl font-extrabold text-white">
                  <CountUp to={22} />+
                </div>
              </div>
            </div>
            <div className="mt-6 grid grid-cols-2 gap-4 text-sm">
              <div className="rounded-xl bg-white/5 p-3">
                <div className="text-white/60">Annual value per employee</div>
                <div className="text-xl font-semibold text-white">$50k+</div>
              </div>
              <div className="rounded-xl bg-white/5 p-3">
                <div className="text-white/60">Uptime</div>
                <div className="text-xl font-semibold text-white">24/7 • self‑healing</div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </Container>
  </div>
);

const Pain: React.FC = () => (
  <SectionShell bg="ember">
    <div className="grid items-start gap-12 md:grid-cols-2">
      <div>
        <motion.h2
          className="text-3xl font-extrabold text-white md:text-4xl"
          initial={{ opacity: 0, y: 12 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, margin: "-15%" }}
          transition={{ duration: 0.6 }}
        >
          Silent Wealth Destruction
        </motion.h2>
        <p className="mt-4 max-w-xl text-slate-200/90">
          Right now your team is stuck doing busywork that steals revenue and morale. Watch what disappears when we
          automate correctly:
        </p>
        <div className="mt-6">
          <StrikeItem delay={0.1}>Data entry a robot can finish in seconds → stealing hours that could close deals.</StrikeItem>
          <StrikeItem delay={0.25}>CRM updates that sync themselves elsewhere → burying your sales team in drudgery.</StrikeItem>
          <StrikeItem delay={0.4}>Follow‑ups slipping through cracks → costing you clients and reputation.</StrikeItem>
          <StrikeItem delay={0.55}>Reports that take 3 hours to build, 30 seconds to skim → wasting time and trust.</StrikeItem>
        </div>
        <div className="mt-8">
          <CTAButton variant="ghost">Stop the leak →</CTAButton>
        </div>
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true, margin: "-10%" }}
        transition={{ duration: 0.7 }}
        className="relative"
      >
        <div className="relative overflow-hidden rounded-2xl border border-white/10 bg-white/5 p-6 shadow-2xl backdrop-blur">
          <div className="text-white/80">What it feels like today</div>
          <div className="mt-4 space-y-2 text-sm text-white/75">
            {Array.from({ length: 5 }).map((_, i) => (
              <div key={i} className="animate-pulse rounded-md bg-white/10 p-3">Endless notification #{i + 1}</div>
            ))}
          </div>
          <div className="mt-6 text-white/70">Looping. Never done. Until Tekita.</div>
        </div>
      </motion.div>
    </div>
  </SectionShell>
);

const Spine: React.FC = () => (
  <SectionShell bg="dark">
    <div className="mx-auto max-w-4xl text-center">
      <motion.h2
        className="text-3xl font-extrabold text-white md:text-5xl"
        initial={{ opacity: 0, y: 12 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true, margin: "-15%" }}
        transition={{ duration: 0.6 }}
      >
        AI That Works Like Your Best Employee
      </motion.h2>
      <p className="mx-auto mt-4 max-w-2xl text-lg text-slate-200/90">
        Not brittle bots. Not clunky templates. Real automation customized to your business — running 24/7 without
        breaking under pressure.
      </p>
    </div>

    <div className="mx-auto mt-12 grid max-w-5xl gap-6 md:grid-cols-3">
      {[
        {
          title: "Workflow Surgery",
          feature: "We uncover hidden leaks in operations.",
          benefit: "You stop bleeding time and start multiplying revenue.",
        },
        {
          title: "Intelligent Automation",
          feature: "Salesforce ⇄ Slack sync, auto‑generated reports in seconds.",
          benefit: "No more copy‑paste culture. Just clarity at speed.",
        },
        {
          title: "Guardian Systems",
          feature: "Always on, self‑healing, under your control.",
          benefit: "Nothing slips, nothing stalls, nothing breaks.",
        },
      ].map((card, i) => (
        <motion.div
          key={card.title}
          initial={{ opacity: 0, y: 24 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, margin: "-10%" }}
          transition={{ duration: 0.6, delay: i * 0.08 }}
          className="group relative overflow-hidden rounded-2xl border border-white/10 bg-white/5 p-6 text-white shadow-lg backdrop-blur"
        >
          <div className="absolute -right-12 -top-12 h-40 w-40 rounded-full bg-[conic-gradient(from_180deg_at_50%_50%,rgba(24,182,201,0.35),rgba(255,77,61,0.35),rgba(24,182,201,0.15))] blur-2xl transition-transform duration-500 group-hover:scale-110" />
          <h3 className="text-xl font-semibold">{card.title}</h3>
          <p className="mt-2 text-sm text-white/80"><span className="font-medium text-white/90">Feature:</span> {card.feature}</p>
          <p className="mt-2 text-sm text-emerald-200/90"><span className="font-medium text-emerald-200">Benefit:</span> {card.benefit}</p>
        </motion.div>
      ))}
    </div>

    <div className="mx-auto mt-10 max-w-3xl rounded-2xl border border-white/10 bg-white/5 p-6 text-center text-white/90">
      Clients reclaim <span className="font-bold text-white">20+ hours</span> per employee, per week — that’s
      <span className="font-bold text-white"> $50k+ </span> of time recovered annually per head.
      <div className="mt-5">
        <CTAButton className="px-7">See Exactly How Much Time You Can Recover</CTAButton>
      </div>
    </div>
  </SectionShell>
);

const Workshops: React.FC = () => (
  <SectionShell bg="ember">
    <div className="mx-auto max-w-4xl text-center text-white">
      <h2 className="text-3xl font-extrabold md:text-5xl">Get AI‑Ready Before the Landscape Leaves You Behind</h2>
      <p className="mx-auto mt-4 max-w-2xl text-lg text-white/90">
        70% of companies still have no AI strategy. The other 30% are quietly pulling away. This is your chance to catch
        up — and leap ahead.
      </p>

      <div className="mt-10 grid gap-6 md:grid-cols-3">
        {[
          { title: "ChatGPT Mastery", copy: "Instant productivity gains." },
          { title: "AI for Sales & Marketing", copy: "Convert more, faster." },
          { title: "Automation Foundations", copy: "Workflows ready to launch Monday." },
        ].map((w, i) => (
          <motion.div
            key={w.title}
            initial={{ opacity: 0, y: 24, rotateX: -8 }}
            whileInView={{ opacity: 1, y: 0, rotateX: 0 }}
            viewport={{ once: true, margin: "-10%" }}
            transition={{ duration: 0.6, delay: i * 0.06 }}
            className="relative overflow-hidden rounded-2xl border border-white/15 bg-white/5 p-6 text-left shadow-xl backdrop-blur"
          >
            <div className="absolute right-4 top-4 rounded-full bg-white/10 px-2 py-1 text-xs text-white/80">
              ⚠ 12 seats only
            </div>
            <h3 className="text-xl font-semibold">{w.title}</h3>
            <p className="mt-2 text-white/85">{w.copy}</p>
          </motion.div>
        ))}
      </div>

      <div className="mt-8">
        <CTAButton className="px-7">Apply for Your Team’s Spot</CTAButton>
      </div>
    </div>
  </SectionShell>
);

const Differentiator: React.FC = () => {
  const [hovered, setHovered] = useState<number | null>(null);
  return (
    <SectionShell bg="pattern">
      <div className="relative overflow-hidden rounded-3xl border border-white/10 bg-white/5 p-8 text-white shadow-xl backdrop-blur">
        {/* Weaving lines background */}
        <motion.div
          className="pointer-events-none absolute inset-0"
          animate={{ opacity: hovered === null ? 0.35 : 0.55 }}
          transition={{ duration: 0.4 }}
          style={{
            background:
              "radial-gradient(60% 40% at 20% 30%, rgba(24,182,201,0.25), transparent), radial-gradient(60% 40% at 80% 70%, rgba(255,100,80,0.25), transparent)",
          }}
        />

        <div className="grid items-center gap-10 md:grid-cols-2">
          <div>
            <h2 className="text-3xl font-extrabold md:text-4xl">We Don’t Just Automate. We Decode.</h2>
            <p className="mt-3 max-w-md text-white/85">
              Tools can’t explain <em>why</em> deals fall apart or <em>why</em> messages miss. Our Zodiac‑lite Analysis
              uncovers the hidden patterns behind your conversations and operations.
            </p>

            <ul className="mt-6 space-y-3 text-white/90">
              {[
                "Why clients ghost (and how to prevent it).",
                "Why projects stall (and where momentum dies).",
                "Why some pitches land like thunder — while others fall flat.",
              ].map((item, i) => (
                <li
                  key={i}
                  onMouseEnter={() => setHovered(i)}
                  onMouseLeave={() => setHovered(null)}
                  className="relative cursor-default rounded-lg border border-white/10 bg-white/5 px-4 py-3 transition-colors hover:bg-white/10"
                >
                  <motion.span animate={{ color: hovered === i ? "#E6FFFA" : "#E2E8F0" }}>{item}</motion.span>
                </li>
              ))}
            </ul>

            <div className="mt-7">
              <CTAButton variant="teal" className="px-7">Book Your Hidden Pattern Scan</CTAButton>
            </div>
          </div>

          {/* Simple illustrative graph / lines */}
          <motion.svg
            viewBox="0 0 600 420"
            className="mx-auto w-full max-w-xl"
            initial={{ opacity: 0, y: 16 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-10%" }}
            transition={{ duration: 0.6 }}
          >
            <defs>
              <linearGradient id="line" x1="0" x2="1" y1="0" y2="0">
                <stop offset="0%" stopColor={brand.tealSoft} />
                <stop offset="100%" stopColor={brand.emberSoft} />
              </linearGradient>
              <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
                <feGaussianBlur stdDeviation="4" result="coloredBlur" />
                <feMerge>
                  <feMergeNode in="coloredBlur" />
                  <feMergeNode in="SourceGraphic" />
                </feMerge>
              </filter>
            </defs>
            {Array.from({ length: 8 }).map((_, i) => (
              <motion.path
                key={i}
                d={`M 20 ${50 + i * 40} C ${120 + i * 10} ${10 + i * 20}, ${300 - i * 10} ${100 + i * 20}, 580 ${40 + i * 40}`}
                stroke="url(#line)"
                strokeWidth={hovered !== null ? (i === hovered + 2 ? 4 : 2) : 3}
                strokeOpacity={hovered !== null ? (i === hovered + 2 ? 0.9 : 0.35) : 0.6}
                fill="none"
                filter="url(#glow)"
              />
            ))}
          </motion.svg>
        </div>
      </div>
    </SectionShell>
  );
};

const Closing: React.FC = () => (
  <SectionShell bg="dark" className="pb-28">
    <div className="mx-auto max-w-3xl text-center text-white">
      <h2 className="text-3xl font-extrabold md:text-5xl">The AI Advantage Compounds</h2>
      <p className="mx-auto mt-4 max-w-2xl text-lg text-white/90">
        The hours you lose this week are gone forever. Meanwhile, early adopters stack those hours into growth you may
        never catch. This isn’t just about saving time — it’s about multiplying freedom.
      </p>
      <div className="mt-8 grid gap-4 text-white/90 md:grid-cols-3">
        {[
          { title: "Focus", copy: "Free your people for deep work that moves the needle." },
          { title: "Expansion", copy: "Open new markets and offerings you never had bandwidth to explore." },
          { title: "Leadership", copy: "Stop chasing competitors — set the pace." },
        ].map((c, i) => (
          <motion.div
            key={c.title}
            initial={{ opacity: 0, y: 16 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-10%" }}
            transition={{ duration: 0.5, delay: i * 0.05 }}
            className="rounded-2xl border border-white/10 bg-white/5 p-5"
          >
            <div className="text-lg font-semibold">{c.title}</div>
            <div className="mt-1 text-white/80">{c.copy}</div>
          </motion.div>
        ))}
      </div>
      <div className="mt-10">
        <CTAButton className="px-8 py-4 text-base">Start Your Automation Journey Today</CTAButton>
      </div>
    </div>
  </SectionShell>
);

const Footer: React.FC = () => (
  <footer className="border-t border-white/10 bg-[#0b1220] py-10 text-white/70">
    <Container className="flex flex-col items-center justify-between gap-6 md:flex-row">
      <div className="flex items-center gap-3">
        <SpiralMark size={28} />
        <div className="text-sm font-semibold tracking-wide">tekita • <span className="text-white/60">weaving presence</span></div>
      </div>
      <div className="flex items-center gap-6 text-sm">
        <a className="hover:text-white" href="#">About</a>
        <a className="hover:text-white" href="#">Contact</a>
        <a className="hover:text-white" href="#">Privacy</a>
      </div>
    </Container>
  </footer>
);

export default function TekitaLanding() {
  return (
    <main className="min-h-screen bg-[#0b1220] font-sans antialiased">
      <Hero />
      <Pain />
      <Spine />
      <Workshops />
      <Differentiator />
      <Closing />
      <Footer />
    </main>
  );
}
